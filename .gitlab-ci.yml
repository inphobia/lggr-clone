stages:
  - setup
  - initialize
  - test
  - analysis
  - document
  - deploy

# Set any variables we need
variables:
  MYSQL_DATABASE: $MYSQL_DB
  MYSQL_ROOT_PASSWORD: $MYSQL_PASS
  ELASTIC_URL: $ELASTIC_HOST/phpunit/result
  ELASTIC_HEADER: 'Content-Type: application/json'
  ELASTIC_USER: $ELK_USER
  ELASTIC_PASSWD: $ELK_PASSWD
  DOCKER_AUTH_CONFIG: '{ "auths": { "https://index.docker.io/v1/": { "auth": "$DOCKER_AUTH" } }}'
  SELENIUM_URL: $SELENIUM_URL

# Bring in any services we need http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# See http://docs.gitlab.com/ce/ci/services/README.html for examples.
#  - name: mariadb:10.1
#    alias: database
#.loadservices: &loadservices
#  services:
#  - name: mariadb:10.1
#    alias: mysql
#  - redis:latest

websetup:
  stage: setup
  image: $CI_REGISTRY/kai/lggr:7.4
  script:
  - composer --no-interaction --quiet install
  - composer npm-install
  - php -i|grep PDO
  # link our project stuff
  - rm .htaccess
  - cd /var/www; mv html html_orig; ln -s /builds/kai/lggr html; ls -l
  artifacts:
    name: "web"
    paths:
      - vendor/
      - node_modules/
      - inc/
      - composer.lock

dbsetup:
  stage: initialize
  image: $CI_REGISTRY/kai/lggr:7.4
  services:
  - name: mariadb:10.1
    alias: mysql
  - redis:latest
  script:
  - sleep 60
  - echo Did wait for services
  - cat setup/1_db.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql
  - cat setup/2_auth.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"
  - cat setup/3_user.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql
  - php admin/db_prefill.php
  - mysqldump --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql --opt "$MYSQL_DATABASE" >dump.sql
  dependencies:
    - websetup
  artifacts:
    name: "database"
    paths:
      - dump.sql

unittest:
  stage: test
  image: $CI_REGISTRY/kai/lggr:7.4
  services:
  - name: mariadb:10.1
    alias: mysql
  - redis:latest
  before_script:
  - ls -l dump.sql composer.lock
  - mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE" <dump.sql
  - cat setup/3_user.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql
  script:
  - composer test
  after_script:
    - php tests/x2j.php >logs/junit.json
    - curl -X POST -H "${ELASTIC_HEADER}" -u "${ELASTIC_USER}:${ELASTIC_PASSWD}" -d @logs/junit.json "${ELASTIC_URL}"
  dependencies:
    - websetup
    - dbsetup
  artifacts:
    name: "test"
    paths:
      - logs/junit.xml
      - logs/coverage.xml
      - logs/junit.json
      - pub_phpunit
    expire_in: 1 month
    reports:
      junit: logs/junit.xml
      cobertura: logs/coverage.xml

webtest:
  stage: test
  image: $CI_REGISTRY/kai/lggr:7.4
  services:
  - name: mariadb:10.1
    alias: mysql
  - name: selenium/standalone-chrome
    alias: selenium
  - redis:latest
  before_script:
  - ls -l dump.sql composer.lock
  - mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE" <dump.sql
  - cat setup/3_user.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql
  - rm .htaccess
  - cd /var/www; mv html html_orig; ln -s /builds/kai/lggr html; ls -l
  - /etc/init.d/apache2 start
  script:
  - cd /builds/kai/lggr
  - WEBIP=`hostname -i` composer webtest
  allow_failure: true
  dependencies:
    - websetup
    - dbsetup
  artifacts:
    paths:
      - logs/webtest_junit.xml
    reports:
      junit: logs/webtest_junit.xml

doctest:
  stage: test
  image: $CI_REGISTRY/kai/lggr:mkdocs
  before_script:
  - mkdir test
  script:
  - mkdocs build --strict --verbose --site-dir test
  artifacts:
    paths:
    - test
  except:
  - master

sonarqube:
  stage: analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  before_script:
    - git fetch --unshallow
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.branch.name=${CI_COMMIT_REF_SLUG}
  allow_failure: true
  only:
    - merge_requests
    - develop
    - feature

makedocs:
  stage: document
  image: $CI_REGISTRY/kai/lggr:mkdocs
  before_script:
  - mkdir pub_mkdocs
  script:
  - mkdocs build
  artifacts:
    paths:
    - pub_mkdocs

doxygen:
  stage: document
  image: $CI_REGISTRY/kai/lggr:doxygen
  before_script:
  - mkdir -p pub_doxygen
  script:
  - doxygen Doxyfile
  artifacts:
    paths:
    - pub_doxygen

pages:
  stage: deploy
  image: alpine
  before_script:
  - mkdir public
  script:
  - cp -a pub_mkdocs/* public/
  - cp -a pub_doxygen/html/* public/doxygen/
  - cp -a pub_phpunit/* public/phpunit/
  artifacts:
    paths:
    - public

deploy:
  stage: deploy
  image: curlimages/curl:latest
  variables:
    URL: "$CI_SERVER_PROTOCOL://$CI_SERVER_HOST:$CI_SERVER_PORT/api/v4/projects/$CI_PROJECT_ID/packages/composer?job_token=$CI_JOB_TOKEN"
  script:
    - version=$([[ -z "$CI_COMMIT_TAG" ]] && echo "branch=$CI_COMMIT_REF_NAME" || echo "tag=$CI_COMMIT_TAG")
    - insecure=$([ "$CI_SERVER_PROTOCOL" = "http" ] && echo "--insecure" || echo "")
    - response=$(curl -s -w "\n%{http_code}" $insecure --data $version $URL)
    - code=$(echo "$response" | tail -n 1)
    - body=$(echo "$response" | head -n 1)
    # Output state information
    - if [ $code -eq 201 ]; then
        echo "Package created - Code $code - $body";
      else
        echo "Could not create package - Code $code - $body";
        exit 1;
      fi
