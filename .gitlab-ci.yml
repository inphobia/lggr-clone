image: $CI_REGISTRY/kai/lggr:latest

stages:
  - setup
  - test
  - analysis

# Set any variables we need
variables:
  MYSQL_DATABASE: $MYSQL_DB
  MYSQL_ROOT_PASSWORD: $MYSQL_PASS
  ELASTIC_URL: $ELASTIC_HOST/phpunit/result
  ELASTIC_HEADER: 'Content-Type: application/json'

cache: &global_cache
  paths:
  - vendor/
  - inc/
  - composer.phar
  key: "$CI_COMMIT_SHORT_SHA"
  policy: pull-push

# Bring in any services we need http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# See http://docs.gitlab.com/ce/ci/services/README.html for examples.
#  - name: mariadb:10.1
#    alias: database
services:
  - name: mariadb:10.1
    alias: mysql
  - redis:latest

# Each job gets a new fresh service, so we have to initialize each time again
.filldb: &filldb
  before_script:
  - cat doc/db.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql
  - cat doc/user.sql | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"
  - php admin/db_prefill.php

websetup:
  stage: setup
  cache:
    <<: *global_cache
    policy: push
  script:
  - php composer.phar --no-interaction --quiet install
  # link our project stuff
  - cd /var/www; mv html html_orig; ln -s /builds/kai/lggr html; ls -l
  - cd /builds/kai/lggr; sed -i "s/localhost/mysql/" inc/Config.php; sed -i "s/localhost/mysql/" inc/AdminConfig.php; sed -i "s/localhost/mysql/" inc/CiConfig.php

unittest:
  stage: test
  <<: *filldb
  allow_failure: true
  cache:
    <<: *global_cache
    paths:
      - logs/junit.xml
      - logs/coverage.xml
  script:
  - php composer.phar test
  after_script:
    - php tests/x2j.php >logs/junit.json
    - curl -X POST -H "${ELASTIC_HEADER}" -d @logs/junit.json "${ELASTIC_URL}" 
  artifacts:
    paths:
      - logs/junit.xml
      - logs/coverage.xml
      - logs/junit.json
    expire_in: 1 month
    reports:
      junit: logs/junit.xml

#webtest:
#  stage: test
#  <<: *filldb
#  allow_failure: true
#  script:
#  - apt-get install -yqq wget
#  - pwd
#  - ls -la
#  - cd /tmp
#  - wget -S -O - http://127.0.0.1/ 

sonarqube:
  stage: analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  cache:
    <<: *global_cache
    paths:
      - .sonar/cache
  before_script:
    - git fetch --unshallow
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  only:
    - merge_requests
    - develop
